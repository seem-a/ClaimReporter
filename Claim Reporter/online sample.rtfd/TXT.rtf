{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
\f3\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red38\green38\blue38;\red173\green173\blue173;
\red23\green147\blue201;\red52\green52\blue52;\red14\green14\blue14;\red117\green117\blue117;\red240\green240\blue240;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww18380\viewh15920\viewkind0
\deftab720
\pard\pardeftab720\sa60
{\field{\*\fldinst{HYPERLINK "http://ddiostips.wordpress.com/"}}{\fldrslt 
\f0\fs72 \cf2 DDIOSTIPS}}
\f0\fs72 \cf3 \
\pard\pardeftab720\sa400

\f1\fs22 \cf4 An adventure into mobile development\
\pard\pardeftab720\sa300

\f0\fs72 \cf3 Main Menu\
\pard\pardeftab720

\fs32 \cf5 skip to content\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf5 		{\field{\*\fldinst{HYPERLINK "http://ddiostips.wordpress.com/about/"}}{\fldrslt about}}
\f1\fs24 \cf6 \
\pard\pardeftab720\sa144

\f0\fs48 \cf7 SLIDING MENU DRAWER WITH CUSTOM SEGUES\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.wordpress.com/2013/12/19/sliding-menu-drawer-with-custom-segues/"}}{\fldrslt 
\f1\fs22 \cf8 12/19/2013}}
\f1\fs22 \cf4  \'b7 by {\field{\*\fldinst{HYPERLINK "http://ddiostips.wordpress.com/author/ddtech24/"}}{\fldrslt \cf8 Ben Parks}} \'b7 Bookmark the {\field{\*\fldinst{HYPERLINK "http://ddiostips.wordpress.com/2013/12/19/sliding-menu-drawer-with-custom-segues/"}}{\fldrslt \cf8 permalink}}. \'b7\
\pard\pardeftab720\sa420

\fs24 \cf6 This post is not related to {\field{\*\fldinst{HYPERLINK "http://www.10inarowapp.com/"}}{\fldrslt \cf5 10InARow}}\'a0but to an up and coming project that I\'92ve been working on that needed a sliding menu drawer. These seem all the rage at the moment and there are a number of open source components available to help you. My problem with these are that you need to maintain a lot of code when you want to add or remove a new menu item. What I wanted was something that I could manage entirely from Interface Builder. So I decided to have a crack at writing my own.\
I went through a few permutations but in the end I got pretty much what I wanted. The secret is a neat little custom segue that allows you to decouple the view controllers for content from the menu draw\'92s view controller itself.\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 Setup\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 Let\'92s kick off by creating a new empty iOS project in Xcode. You\'92ll need to target at least iOS 6. Now add a storyboard and select it in the 
\b Main Interface
\b0 \'a0of 
\b Deployment Info
\b0  section on the\'a0
\b General
\b0  tab in the project properties. Open your new storyboard and drop a View Controller onto the canvas. It should be the initial view controller by default.\
Next, open the AppDelegate class and make sure that application:didFnishLauchingWithOptions: just returns YES, like this:\
\pard\pardeftab720

\f2 \cf6 \cb9 -(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\
\{\
    return YES;\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 Run your app in the simulator and make sure you can see an empty white window.\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 MenuDrawViewController\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 The first job is to create a new class that extends UIViewController called\'a0MenuDrawViewController. This where all the code is going to go that will manage all your other content based view controllers. It\'92s key that at no point will this class will import any of your other view controllers. It will only see them as view controllers constructed entirely by the framework from the storyboard.\
Go back to your storyboard and select the view controller that you created during the setup. Make this view controller an instance of MenuDrawViewController by setting the class name in it\'92s 
\b Custom Class
\b0  field.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-20-at-21-23-54.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-20-at-21-23-54.png \width6000 \height3780 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 Add a public property to your MenuDrawViewController interface of type UIViewController. This is going to be used to tell the MenuDrawViewController about content to display.\
\pard\pardeftab720

\f2 \cf6 \cb9 @interface DDMenuDrawerViewController : UIViewController\
\
@property(nonatomic, weak) UIViewController* content;\
\
@end\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 \cb1 MenuViewController\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 The MenuViewController is the view controller that will contain your menu UI. In my example I\'92m using a UITableViewController with static cells but it could easily be any kind of view controller with any kind of layout.\
Grab a UITableViewController and drop it onto your storyboard canvas somewhere close to your MenuDrawerViewController.\
Create another new class, this time called MenuViewController. If you\'92re using a table for your menu like me then you\'92ll need to make it extend UITableViewController.\
This class is going to be super simple and super clean. It\'92s going to have one public property of type MenuDrawerViewController. Go ahead and add this to your interface definition now. It should look something like this:\
\pard\pardeftab720

\f2 \cf6 \cb9 @class DDMenuDrawerViewController;\
\
@interface DDMenuViewController : UITableViewController\
\
@property(nonatomic, weak) DDMenuDrawerViewController* menuDrawerViewController;\
\
@end\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 In fact, as I\'92m using static cells in my menu, I gutted the class implementation too. If you don\'92t do this your static layout won\'92t be loaded. The only reason we have this class at all is so that custom segue (to be created) has a way back to the MenuDrawViewController instance \'96 this should become clear later.\
No go back to the storyboard and set the custom class of the menu view controller to be MenuViewController. Now is also a good time to setup your menu UI just how you want it. My menu is going to have just two options called Text and Image. Selecting Text will show a view controller with some text on it whilst selecting Image will show a view controller with an image on it.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-19-at-20-20-05.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-19-at-20-20-05.png \width6000 \height3520 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa300

\f0\fs40 \cf3 Embed the MenuViewController\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 Now we need to tell the MenuDrawerViewController about the MenuViewController. We do this by embedding the MenuViewController into the MenuDrawViewController.\
Take a 
\b Container View
\b0  and drop it onto the MenuDrawerViewController. Make sure it fills the entire view. IB tries to be helpful by also adding a new view controller onto the canvas that is automatically connected to the 
\b Container View
\b0  by an embed segue. You can delete this view controller right away as you don\'92t need it.\
Next control click on the 
\b Container View
\b0 , drag over to you MenuViewController and select\'a0
\b embed
\b0 . Click on the segue itself and set it\'92s 
\b Storyboard Embed Segue Identifier
\b0  to 
\b \'93embedMenu\'94
\b0 .\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/embedsegue.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic embedsegue.png \width6000 \height3520 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 Run your app and you should now see your menu. If you don\'92t then go back and debug now \'96 fixing it later will be a hassle.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-19-at-20-33-35.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-19-at-20-33-35.png \width3680 \height5960 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 The next thing to do is tell the MenuViewController about the MenuDrawViewController. We do this in the prepareForSegue:sender method of MenuDrawViewController. You\'92ll need to create this method yourself.\
\pard\pardeftab720

\f2 \cf6 \cb9 -(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender\
\{\
    if([segue.identifier isEqualToString:@&amp;quot;embedMenu&amp;quot;])\
    \{\
        DDMenuViewController* menuViewController = segue.destinationViewController;\
        menuViewController.menuDrawerViewController = self;\
        self.menuDrawViewController = menuViewController;\
    \}\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 Don\'92t forget you\'92ll need to import the MenuViewController class.\'a0Note how we\'92re using identifier of our embed segue to trap a reference to the MenuViewController.\
Also note how we\'92re storing a reference to the MenuViewController instance. You\'92ll need to create a property in the MenuDrawerViewController private interface to store this in. This is used later as a way to display the initial content.\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 Creating the content view controllers\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 Now we need to create the content. So go back to the storyboard and drop two UINavigationControllers onto the canvas to the right of the MenuViewController you\'92ve added previously. I\'92m not going to into too much detail here as this should be bread and butter stuff. Suffice to say that the root view controllers for each UINavigationController will the content that you\'92re going to display when selecting each menu item, so you\'92ll potentially need some content view controllers for every menu option that you have.\
Here\'92s what my storyboard looks like after adding the content.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-19-at-21-01-12.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-19-at-21-01-12.png \width6000 \height4120 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 See how there\'92s a large gap between the menu and content view controllers. We\'92re going to bridge that gap next.\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 Creating a custom segue\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 Add a new class to your project that extends UIStoryboardSegue and call it DisplayContentSegue. Now go back to the storyboard and control click one of the menu options and drag to the corresponding UINavigationController that you want to be displayed when that item is selected. You\'92ll see a menu pop up in which should be listed your custom segue class (DisplaySegue). Choose the custom segue from section labeled\'a0
\b Selection Segue
\b0 .\
Click on the segue and set it\'92s identifier to 
\b \'93displayText\'94
\b0  or something that makes sense for the menu item.
\b \'a0
\b0 Do the same for the other menu item and corresponding UINavigationController \'96 don\'92t forget to set the segue\'92s identifier with something sensible, like 
\b \'93displayImage\'94
\b0 .\
\pard\pardeftab720\sa420
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-19-at-21-59-44.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-19-at-21-59-44.png \width6000 \height4160 \noorient
}¬}}}\pard\pardeftab720\sa420
\cf6 \
Now when you tap on the menu item, the framework is going to create a new instance a UINavigationController. It\'92s then going to embed your content in the root of UINavigationController and finally, it\'92s going to invoke the custom segue with the constructed UINavigationController set as the destination view controller and menu as the source view controller. All we need to is tell the MenuDrawViewController about the new content and that\'92s what we\'92re going to do next.\
Go to the DisplaySegue class Override the perform method so it contains the following:\
\pard\pardeftab720

\f2 \cf6 \cb9 #import &amp;quot;DDMenuViewController.h&amp;quot;\
#import &amp;quot;DDMenuDrawerViewController.h&amp;quot;\
\
@implementation DDDisplayContentSegue\
\
-(void)perform\
\{\
    DDMenuDrawerViewController* menuDrawerViewController = ((DDMenuViewController*)self.sourceViewController).menuDrawerViewController;\
    menuDrawerViewController.content = self.destinationViewController;\
\}\
\
@end\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 This tells the MenuDrawerViewController about the new content that we want to display upon execution of the segue. It\'92s then just a matter of rearranging the content and animating as required in the MenuDrawerViewController.\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 Displaying the content\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 Open up your MenuDrawViewController implementation and override the setter for the content property so it looks like this:\
\pard\pardeftab720

\f2 \cf6 \cb9 -(void)setContent:(UIViewController *)content\
\{\
    if(_content)\
    \{\
        [_content.view removeFromSuperview];\
        [_content removeFromParentViewController];\
    \}\
\
    _content = content;\
    [self addChildViewController:_content];\
    [_content didMoveToParentViewController:self];\
    [self.view addSubview:_content.view];\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 So what\'92s going on here? The first if statement checks for existing content. If it exists then the view is removed from the super view and the content view controller is removed from the parent view controller into which it\'92s embedded, i.e. the MenuDrawerViewController.\
Next the reference to the incoming view controller is saved. We then embed the new view controller into the MenuDrawerViewController and add it\'92s view.\
We can test this now. Modify the viewDidLoad method to invoke one of the custom segues using the identifier you specified earlier. Choose the identifier for the segue that\'92s connected to the content view controller you want to display initially.\
\pard\pardeftab720

\f2 \cf6 \cb9 - (void)viewDidLoad\
\{\
   [super viewDidLoad];\
   [self.menuViewController performSegueWithIdentifier:@&amp;quot;displayText&amp;quot; sender:self.menuViewController];\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 Run your code and you should see the content view controller you elected to be displayed by default. If you don\'92t see this then\'a0stop and debug now.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-19-at-21-57-24.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-19-at-21-57-24.png \width3680 \height5960 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa300

\f0\fs40 \cf3 Opening the drawer\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 The next job is to provide someway to open the menu drawer. The convention for this is to use a button in the navigation bar that looks a bit like a hamburger. Here is the image I\'92m using for this:\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/burger.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic burger.png \width1760 \height1760 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 Add the image to the image assets of your project and apply the image to a UIBarButtonItem that you need to add to the navigation bar of your content views.\
Now you need something to hook these buttons up to that will open the menu drawer. Add a new class to your project that is designed just to handle these button events. Call it ButtonHandler and have it extend NSObject.\
In the implementation file create a method that will be called when the button is pressed that looks like this:\
\pard\pardeftab720

\f2 \cf6 \cb9 -(IBAction)handleButton:(id)sender\
\{\
    [[NSNotificationCenter defaultCenter] postNotificationName:@&amp;quot;notifyButtonPressed&amp;quot; object:self];\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 What this is going to do is post a notification back to the MenuDrawViewController to tell it open (or close) the menu drawer \'96 simple.\
Now go back your storyboard and drop an object onto bar at the bottom of one of your content view controllers. Set the custom class of your object to the ButtonHandler class that you just created. Now control click on the hamburger button in the navigation bar and drag down to the ButtonHandler object. From the resulting menu select\'a0
\b \'93handle button\'94
\b0  from the 
\b Sent Actions
\b0  section. Repeat this for your other content view controllers.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-20-at-20-33-12.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-20-at-20-33-12.png \width6000 \height3520 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 Now we need to get the MenuDrawViewController to listen for the notification so open the MenuDrawerViewController class and add the following line somewhere in the viewDidLoad method.\
\pard\pardeftab720

\f2 \cf6 \cb9     [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(slideDrawer:) name:@&amp;quot;notifyButtonPressed&amp;quot; object:nil];\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 As we\'92re good developers we\'92re going to make sure we tidy up by removing the observer in the dealloc method, like this:\
\pard\pardeftab720

\f2 \cf6 \cb9 -(void)dealloc\
\{\
    [[NSNotificationCenter defaultCenter] removeObserver:self];\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 The observant amongst you (no pun intended) will have noticed that we now have warning. When we registered the MenuDrawViewController as an observer of the \'93notifyButtonPressed\'94 event we asked it invoke a method that doesn\'92t yet exist when the event is fired; slideDrawer.\
This method is going to open the menu drawer if it\'92s closed and close it if it\'92s open.\
\pard\pardeftab720

\f2 \cf6 \cb9 -(void)slideDrawer:(id)sender\
\{\
    if(self.content.view.frame.origin.x &amp;gt; 0)\
    \{\
        [self closeDrawer];\
    \}\
    else\
    \{\
        [self openDrawer];\
    \}\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 Now we need to create the methods that do the heavy lifting of opening and closing the menu drawer.\
\pard\pardeftab720

\f2 \cf6 \cb9 -(void)openDrawer\
\{\
    CGRect fm = self.content.view.frame;\
    fm.origin.x = 240.0;\
\
    [UIView animateWithDuration:0.3 animations:^\{\
        self.content.view.frame = fm;\
    \}];\
\}\
\
-(void)closeDrawer\
\{\
    CGRect fm = self.content.view.frame;\
    fm.origin.x = 0;\
\
    [UIView animateWithDuration:0.3 animations:^\{\
        self.content.view.frame = fm;\
    \}];\
\}\
\pard\pardeftab720\sa420

\f1 \cf6 \cb1 The code should be self explanatory, but the general gist is that we animate the origin of the content view controller\'92s frame to an x position of 240 when opening and to 0 when closing. I found that 240 is a good number given the size of the hamburger button I\'92m using. You might need to tweak this to suit.\
If you don\'92t like the magic number (240) you could change the width of the container view in the MenuDrawerViewController that is used to embed the MenuViewController to 240. Then use self.menuDrawViewController.view.frame.size.width to control how much the content view is moved by and not magic number. This means that InterfaceBuilder is defining the amount by which the content viewed and not the code \'96 as it should be!\
Now you need to revisit your setContentMethod. You need to tell the new incoming view controller to assume the position of the previous one. You also need to tell the drawer to close once the view controllers have been swapped.\
\pard\pardeftab720

\f2 \cf6 \cb9 -(void)setContent:(UIViewController *)content\
\{\
    if(_content)\
    \{\
        [_content.view removeFromSuperview];\
        [_content removeFromParentViewController];\
\
        content.view.frame = _content.view.frame;\
    \}\
\
    _content = content;\
    [self addChildViewController:_content];\
    [_content didMoveToParentViewController:self];\
    [self.view addSubview:_content.view];\
\
    [self closeDrawer];\
\}\
\pard\pardeftab720\sa300

\f0\fs40 \cf3 \cb1 Testing\
\pard\pardeftab720\sa420

\f1\fs24 \cf6 You now should be in a position to test your code. When you tap on the button the drawer should open revealing the menu underneath. Tap the button again and the drawer should close. Open the drawer again and this time select a menu option and the corresponding content view controller should be shown.\
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://ddiostips.files.wordpress.com/2013/12/screen-shot-2013-12-20-at-21-00-13.png"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic screen-shot-2013-12-20-at-21-00-13.png \width3680 \height5960 \noorient
}¬}\pard\pardeftab720

\f1 \cf5 \
}}\pard\pardeftab720\sa420
\cf6 And there you have it. What\'92s great about this solution is that once you have the code in place, all you need to do to add a new menu option is:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf6 {\listtext	1.	}Add the content view controller for the new option\
{\listtext	2.	}Add an item to the menu for content view controller\
{\listtext	3.	}Connect the menu item to the content view controller using the custom segue\
{\listtext	4.	}Add an object to the content view controller to handle the hamburger button press\
\pard\pardeftab720\sa420
\cf6 The are 
\b zero
\b0  code changes to make!\
You can develop it further so that when the view controller is set the in MenuDrawerViewController a UIPanGestureRecognizer is added to the new content view controller. \'a0You could also add a drop shadow to content view controller view so that there is clearer separation between the menu and content. Both of these issues are covered in Tammy Coron\'92s article on Ray Wenderlich which can be found here:\
\pard\pardeftab720\sa420
{\field{\*\fldinst{HYPERLINK "http://www.raywenderlich.com/32054/how-to-create-a-slide-out-navigation-like-facebook-and-path"}}{\fldrslt \cf5 http://www.raywenderlich.com/32054/how-to-create-a-slide-out-navigation-like-facebook-and-path}}\
Thanks for reading and I hope you\'92ve found it useful. If you like this post then please do check out our current release in the Apple App Store, {\field{\*\fldinst{HYPERLINK "http://10inarowapp.com/"}}{\fldrslt \cf5 10InARow}}\
\pard\pardeftab720\qc
{\field{\*\fldinst{HYPERLINK "http://www.10inarowapp.com/"}}{\fldrslt 
\f3 \cf0 {{\NeXTGraphic icon-200.png \width4000 \height4000 \noorient
}¬}\pard\pardeftab720\qc

\f1 \cf5 \
}}\pard\pardeftab720\sa420\qc
\cf6 \
\pard\pardeftab720
{\field{\*\fldinst{HYPERLINK "http://en.wordpress.com/about-these-ads/"}}{\fldrslt 
\f3\fs18 \cf5 \ul \ulc5 About these ads}}
\f3\fs18 \cf5 \ul \ulc5 \
}